//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOEDU.Entities.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SOEDUEntities : DbContext
    {
        public SOEDUEntities()
            : base("name=SOEDUEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Sys_Assess> Sys_Assess { get; set; }
        public virtual DbSet<Sys_Attach> Sys_Attach { get; set; }
        public virtual DbSet<Sys_Course> Sys_Course { get; set; }
        public virtual DbSet<Sys_CourseCategory> Sys_CourseCategory { get; set; }
        public virtual DbSet<Sys_Lesson> Sys_Lesson { get; set; }
        public virtual DbSet<Sys_Section> Sys_Section { get; set; }
        public virtual DbSet<Sys_StudentCourse> Sys_StudentCourse { get; set; }
        public virtual DbSet<Sys_StudentTest> Sys_StudentTest { get; set; }
        public virtual DbSet<Sys_StudentTestSection> Sys_StudentTestSection { get; set; }
        public virtual DbSet<Sys_Target> Sys_Target { get; set; }
        public virtual DbSet<Sys_TeacherCourse> Sys_TeacherCourse { get; set; }
        public virtual DbSet<Sys_Test> Sys_Test { get; set; }
        public virtual DbSet<Sys_TestLesson> Sys_TestLesson { get; set; }
        public virtual DbSet<Sys_TestLessonAnswer> Sys_TestLessonAnswer { get; set; }
        public virtual DbSet<Sys_TestLessonQuestion> Sys_TestLessonQuestion { get; set; }
        public virtual DbSet<Sys_TestSection> Sys_TestSection { get; set; }
        public virtual DbSet<Sys_TestSectionAnswer> Sys_TestSectionAnswer { get; set; }
        public virtual DbSet<Sys_TestSectionQuestion> Sys_TestSectionQuestion { get; set; }
        public virtual DbSet<Sys_Users> Sys_Users { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Sys_GetListCourse_Result> Sys_GetListCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetListCourse_Result>("Sys_GetListCourse");
        }
    
        public virtual ObjectResult<Sys_GetListCourseByStudent_Result> Sys_GetListCourseByStudent(string user_ID)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetListCourseByStudent_Result>("Sys_GetListCourseByStudent", user_IDParameter);
        }
    
        public virtual ObjectResult<Sys_GetListCourseByTeacher_Result> Sys_GetListCourseByTeacher(string user_ID)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sys_GetListCourseByTeacher_Result>("Sys_GetListCourseByTeacher", user_IDParameter);
        }
    }
}
